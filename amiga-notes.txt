SDL_t0Service
	SDL_PCService
	SDL_ALSoundService

SD_Startup -> BE_ST_StartAudioSDService
SD_SetSoundMode -> SDL_SetTimerSpeed -> SDL_SetIntsPerSec -> SDL_SetTimer0 -> BE_ST_SetTimer
#define	TickBase	70
MusicMode == smm_AdLib

void (*SoundUserHook)(void); 
SD_SetUserHook
//LocalTime++;
//TimeCount++;

BE_ST_ShortSleep
BE_ST_WaitVBL
BE_ST_Delay
BE_ST_TimeCountWaitForDest
BE_ST_TimeCountWaitFromSrc

BEL_ST_UpdateHostDisplay();

GameLoop
	DrawPlayScreen
		VW_SetScreen
			VW_WaitVBL
				BE_ST_WaitVBL

/* Skull'n'Bones loop */
USL_PlayPong
	do
	{
		waittime = SD_GetTimeCount();
		VW_UpdateScreen();
		...
		BE_ST_TimeCountWaitFromSrc(waittime, 1);
	}

/* Fizzle fade loop */
FizzleFade
	do
	{
		...
		frame++;
		BE_ST_TimeCountWaitForDest(frame);
	} while (1);

/* Game playloop */
PlayLoop
	do
	{
		...
		BE_ST_TimeCountWaitFromSrc(SD_GetTimeCount(), 1);
	}while (!playstate);

VW_ColorBorder
	BE_ST_SetBorderColor

VW_SetSplitScreen
	BE_ST_EGASetSplitScreen

cat3d_exe_main
	DemoLoop
		GameLoop
			PlayLoop
				ThreeDRefresh
					DrawWallList
						ScaleWalls
							ExecuteCompScale
								BE_ST_EGAUpdateGFXPixel4bpp
					DrawScaleds
						ScaleShape
							ExecuteCompShape
								ExecuteCompScale
									BE_ST_EGAUpdateGFXPixel4bpp
					DrawHand
						VW_MaskBlock
							BE_ST_EGAUpdateGFXByte
							BE_ST_EGAFetchGFXByte

status bar
cat3d_exe_main
	GameLoop
		DrawPlayScreen
			RedrawStatusWindow
				DrawLevelNumber
					VW_Bar
						BE_ST_EGAUpdateGFXPixel4bppRepeatedly
						BE_ST_EGAUpdateGFXPixel4bpp
					US_PrintUnsigned
						US_Print
							VWB_DrawPropString
								VW_DrawPropString
									VWL_XORBuffer
										BE_ST_EGAXorGFXByte
								VW_MarkUpdateBlock
				DrawChar
					BE_ST_EGAUpdateGFXByteScrToScr
				AddPoints
					DrawChar
						BE_ST_EGAUpdateGFXByteScrToScr
				DrawBars
					VW_Bar
						BE_ST_EGAUpdateGFXPixel4bppRepeatedly
						BE_ST_EGAUpdateGFXPixel4bpp
					BE_ST_EGAUpdateGFXBufferScrToScr

T_Player
	DrawText
	DrawCompass
		LatchDrawPic
			BE_ST_EGAUpdateGFXBufferScrToScr

PostFullDisplay
PlayLoop
GameLoop
...
RedrawStatusWindow
	DrawNum
		DrawChar
			BE_ST_EGAUpdateGFXByteScrToScr
	DrawHealth
		VW_DrawPic
			VW_MemToScreen
				BE_ST_EGAUpdateGFXBuffer
		LatchDrawPic
			BE_ST_EGAUpdateGFXBufferScrToScr
	DrawRadar
		LatchDrawPic
			BE_ST_EGAUpdateGFXBufferScrToScr
		RadarBlip
			BE_ST_EGAUpdateGFXPixel4bpp
	DrawNSEWIcons
		VWB_DrawSprite
			VW_MarkUpdateBlock
			VW_MaskBlock
				BE_ST_EGAUpdateGFXByte
				BE_ST_EGAFetchGFXByte
	DrawGems
		LatchDrawPic
			BE_ST_EGAUpdateGFXBufferScrToScr
	DrawScrolls
		VW_Bar
			BE_ST_EGAUpdateGFXPixel4bppRepeatedly
			BE_ST_EGAUpdateGFXPixel4bpp
		DrawChar
			BE_ST_EGAUpdateGFXByteScrToScr

T_Player
	DrawText
		DisplayMsg
			VW_Bar
			US_CPrintLine
				USL_DrawString
					VWB_DrawPropString
	DrawHealth-
	DrawFreezeTime
		DrawNum
			DrawChar
				...
	DrawRadar
	DrawNSEWIcons+
	DrawGems


VW_ClearVideo
	BE_ST_EGAUpdateGFXPixel4bppRepeatedly

VW_Hlin
	BE_ST_EGAUpdateGFXPixel4bppRepeatedly

VW_Bar
	BE_ST_EGAUpdateGFXPixel4bppRepeatedly
	BE_ST_EGAUpdateGFXPixel4bpp

// drawing functions
void BE_ST_EGAUpdateGFXByte(uint16_t destOff, uint8_t srcVal, uint16_t planeMask)
void BE_ST_EGAUpdateGFXBits(uint16_t destOff, uint8_t srcVal, uint8_t bitsMask)
void BE_ST_EGAUpdateGFXBuffer(uint16_t destOff, const uint8_t *srcPtr, uint16_t num, uint16_t planeMask)
void BE_ST_EGAUpdateGFXByteScrToScr(uint16_t destOff, uint16_t srcOff)
void BE_ST_EGAUpdateGFXByteWithPlaneMaskScrToScr(uint16_t destOff, uint16_t srcOff, uint16_t planeMask)
void BE_ST_EGAUpdateGFXBitsScrToScr(uint16_t destOff, uint16_t srcOff, uint8_t bitsMask)
void BE_ST_EGAUpdateGFXBufferScrToScr(uint16_t destOff, uint16_t srcOff, uint16_t num)
uint8_t BE_ST_EGAFetchGFXByte(uint16_t destOff, uint16_t planenum)
void BE_ST_EGAFetchGFXBuffer(uint8_t *destPtr, uint16_t srcOff, uint16_t num, uint16_t planenum)

// hottest ones
void BE_ST_EGAUpdateGFXPixel4bpp(uint16_t destOff, uint8_t color, uint8_t bitsMask)
void BE_ST_EGAUpdateGFXPixel4bppRepeatedly(uint16_t destOff, uint8_t color, uint16_t count, uint8_t bitsMask)

void BE_ST_EGAXorGFXByte(uint16_t destOff, uint8_t srcVal, uint16_t planeMask) -> VWL_XORBuffer -> VW_DrawPropString (NUMFONT)
void BE_ST_EGAOrGFXBits(uint16_t destOff, uint8_t srcVal, uint8_t bitsMask) // unused

// changing screen address
VW_SetScreen
VW_UpdateScreen
ThreeDRefresh
	BE_ST_SetScreenStartAddress


displayofs+panadjust
bufferofs = screenloc[screenpage];
id0_unsigned_t screenloc[3]= {0x900,0x2000,0x3700};
#define PAGE1START		0x900
#define PAGE2START		0x2000
#define	PAGE3START		0x3700
#define	FREESTART		0x4e00 

// functions to be optimized
VW_MaskBlock
ExecuteCompScale
ExecuteCompShape
BuildCompScale
BuildCompShape
ExecuteCompScale
ClearScreen
VW_Bar
FixedByFrac

// save games
GE_SaveGame
	USL_SaveGame
		SaveTheGame
id0_boolean_t	LoadTheGame(BE_FILE_T file);
loadedgame
ex_loadedgame
USL_WriteConfig(void)
USL_DoSaveGame
BE_Cross_open_for_overwriting

SetupGameLevel
	CA_CacheMap

FizzleOut
GameLoop
	DrawEnterScreen

VerifyGateExit
playstate == ex_warped

DEBUG_OVERHEAD

// key choices
BE_ST_AltControlScheme_Push();
BE_ST_AltControlScheme_Pop();
BE_ST_AltControlScheme_PrepareFaceButtonsDOSScancodes
USL_CtlDialog // cat3d
GetKeyChoice
sc_N
Keyboard[49]
sc_Y
Keyboard[21]
BE_ST_ShortSleep

// 32-bit (fixed) obj fields
distance
	100
	#define GLOBAL1		(1l<<16)
	#define TILEGLOBAL  GLOBAL1
	#define TILESHIFT	16l
	MoveObj

viewheight, viewx OK, DRAW
	TransformActor

xl, xh, yl, yh OK
	CalcBounds
	 ob->x - ob->size; 
	 
size
	MINDIST

IN_Startup
	INL_StartJoy
		IN_GetJoyAbs
			BE_ST_GetJoyAbs
		IN_SetupJoy
			INL_SetJoyScale

IN_ReadCursor
IN_GetJoyButtonsDB
	INL_GetJoyButtons
		BE_ST_GetJoyButtons

JoysPresent
ctrl_Joystick1 = ctrl_Joystick,ctrl_Joystick2, 
JoystickCalibrated
ControlTypeUsed

RefKeen_PrepareAltControllerScheme
 g_beStControllerMappingDebugKeys
 g_refKeenCfg

chunky wall

Target->Width
VIEWXH+1

Target->Height
VIEWYH+1

ScaleWalls
SPG_ScaleWalls

chunky shape

int ColorKey
const	id0_byte_t		BACKGROUNDPIX	=   5;

shape = shapedirectory[farthest->state->shapenum-FIRSTSCALEPIC];

DeplanePic (picnum); -> spotvis
shapesize[scnum] = BuildCompShape (&shapedirectory[scnum]);

void ExecuteCompScale(const id0_byte_t *codePtr, id0_unsigned_t egaDestOff, const id0_byte_t *srcPtr, id0_byte_t mask)
ExecuteCompScale(comptablebuff + *(id0_int_t *)(comptablebuff+(*(id0_int_t *)(currCodePtr+10))), egaDestOff, srcGfxPtr+(*(id0_int_t *)(currCodePtr+19)), mask);

ExecuteCompShape((id0_byte_t *)compshape + (*codehandle), (id0_byte_t *)comptable, egaDestOff, (id0_byte_t *)compshape, bitmasks1[pixel&7][pixwidth-1]);
static void ExecuteCompShape(const id0_byte_t *codePtr, id0_byte_t *comptablebuff, id0_unsigned_t egaDestOff, const id0_byte_t *srcGfxPtr, id0_byte_t mask)
id0_byte_t *scalerFarRetPtr = comptablebuff + *(id0_int_t *)(comptablebuff+(*(id0_int_t *)(currCodePtr+2)));
			// 2
			*code++ = 0x8b;		// mov bx,[lastpix*2]
			*code++ = 0x1e;
			*((id0_unsigned_t id0_far *)code)++ = lastpix*2;

comptablebuff + *(id0_int_t *)(comptablebuff+(*(id0_int_t *)(currCodePtr+10)))
			// 10
			*code++ = 0xa1;		// mov ax,[firstpix*2]	/*************
			*((id0_unsigned_t id0_far *)code)++ = firstpix*2;

srcGfxPtr+(*(id0_int_t *)(currCodePtr+19))
			// 19
			*code++ = 0xbe;		// mov si,OFFSET pixelofs-firstpixel
			*((id0_unsigned_t id0_far *)code)++ = pixelofs-firstpix;